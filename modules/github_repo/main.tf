# ----------------------------------------------------
# 1. DATA AND LOCALS (ECR URL Generation)
# ----------------------------------------------------

# List of ECR repositories required by the application
locals {
  app_repositories = ["node-repo", "nginx-repo", "cli-repo"]
}

# Generate the JSON string containing all ECR URLs
locals {
  ecr_urls_map = {
    for repo in local.app_repositories : 
    repo => "${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.aws_region}.amazonaws.com/${var.app_name}-${repo}"
  }
  ecr_urls_json = jsonencode(local.ecr_urls_map)
}

# Get current AWS account ID
data "aws_caller_identity" "current" {}


# ----------------------------------------------------
# 2. GITHUB REPOSITORY & SECRETS
# ----------------------------------------------------

# 2.1 Create new repository from template
resource "github_repository" "new_app_repo" {
  name        = var.app_name
  description = "Application repository generated by Terraform"
  visibility  = "private"

  template {
    owner      = split("/", var.repo_template)[0]
    repository = split("/", var.repo_template)[1]
  }

  has_issues   = true
  has_projects = true
  has_wiki     = false
  auto_init    = true 
}

# 2.2 GitHub Actions Secrets
# AWS Access Key ID
resource "github_actions_secret" "aws_key_id" {
  repository      = github_repository.new_app_repo.name
  secret_name     = "AWS_ACCESS_KEY_ID"
  plaintext_value = var.aws_access_key_id
}

# AWS Secret Access Key
resource "github_actions_secret" "aws_secret_key" {
  repository      = github_repository.new_app_repo.name
  secret_name     = "AWS_SECRET_ACCESS_KEY"
  plaintext_value = var.aws_secret_access_key
}


# ----------------------------------------------------
# 3. REPOSITORY FILES (Workflow and Deploy Compose)
# ----------------------------------------------------

# 3.1 Update Workflow File (Inject ECR URIs for CI)
resource "github_repository_file" "workflow_update" {
  repository          = github_repository.new_app_repo.name
  file                = ".github/workflows/build_push_ecr.yml"
  content             = templatefile("${path.module}/templates/workflow_template.tpl", {
    ecr_urls_json  = local.ecr_urls_json
    aws_region     = var.aws_region
    app_name       = var.app_name
  })
  commit_message      = "Terraform: Update ECR URIs and Region for CI/CD"
  overwrite_on_create = true 
  depends_on          = [
    github_repository.new_app_repo, 
    github_actions_secret.aws_key_id
  ]
}

# 3.2 Add the docker-compose deployment file (Generated by Terraform)
resource "github_repository_file" "deploy_compose_file" {
  repository          = github_repository.new_app_repo.name
  file                = "docker-compose.deploy.yml"
  content             = templatefile("${path.module}/templates/docker_compose_deploy.tpl", {
    # Passing ECR URIs
    node_uri       = jsondecode(local.ecr_urls_json)["node-repo"]
    nginx_uri      = jsondecode(local.ecr_urls_json)["nginx-repo"]
    cli_uri        = jsondecode(local.ecr_urls_json)["cli-repo"]
    
    POSTGRES_DB     = "$${POSTGRES_DB}"
    POSTGRES_USER   = "$${POSTGRES_USER}"
    POSTGRES_PASSWORD = "$${POSTGRES_PASSWORD}"
    DB_PORT         = "$${DB_PORT}"
    NODE_ENV        = "$${NODE_ENV}"
    APP_PORT        = "$${APP_PORT}"
    SECRET_KEY      = "$${SECRET_KEY}"
  })
  commit_message      = "Terraform: Add dynamic docker-compose.deploy.yml"
  overwrite_on_create = true
  depends_on          = [
    github_repository.new_app_repo
  ]
}